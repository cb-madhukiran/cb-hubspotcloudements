{
    "active": true,
    "api": "GET /hubspot/validate",
    "configuration": [],
    "debugLoggingEnabled": true,
    "debugLoggingExpires": "2019-11-16T10:17:47Z",
    "engine": "v1",
    "id": 31468,
    "method": "GET",
    "name": "HubSpotValidateSetup",
    "singleThreaded": false,
    "steps": [
        {
            "name": "Props",
            "onFailure": [],
            "onSuccess": [
                "InputParams"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "InputParams",
            "onFailure": [],
            "onSuccess": [
                "getChargebeeConfiguration"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "getChargebeeConfiguration",
            "onFailure": [],
            "onSuccess": [
                "validChargebeeConfigAPIResponse"
            ],
            "properties": {
                "args": "${steps.InputParams}",
                "formulaId": "31331"
            },
            "type": "formula"
        },
        {
            "name": "validChargebeeConfigAPIResponse",
            "onFailure": [
                "getChargebeeConfigurationError"
            ],
            "onSuccess": [
                "HasValidateInstance"
            ],
            "properties": {},
            "type": "filter"
        },
        {
            "name": "HasValidateInstance",
            "onFailure": [
                "FormulaParams"
            ],
            "onSuccess": [
                "ConfigParams"
            ],
            "properties": {},
            "type": "filter"
        },
        {
            "name": "ConfigParams",
            "onFailure": [],
            "onSuccess": [
                "HasNoExcecution"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "HasNoExcecution",
            "onFailure": [
                "ExecutionStatusParam"
            ],
            "onSuccess": [
                "ValidateAgain"
            ],
            "properties": {},
            "type": "filter"
        },
        {
            "name": "ValidateAgain",
            "onFailure": [
                "isValidationSuccessFull"
            ],
            "onSuccess": [
                "startExecution"
            ],
            "properties": {},
            "type": "filter"
        },
        {
            "name": "startExecution",
            "onFailure": [
                "startExecutionError"
            ],
            "onSuccess": [
                "UpdateConfigParams"
            ],
            "properties": {
                "api": "/formulas/instances/${steps.ConfigParams.config_json.cloudElements.formulas.formula_Validate.instance}/executions",
                "body": "${steps.ConfigParams.body}",
                "method": "POST"
            },
            "type": "request"
        },
        {
            "name": "UpdateConfigParams",
            "onFailure": [],
            "onSuccess": [
                "UpdateConfigParamsCall"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "UpdateConfigParamsCall",
            "onFailure": [
                "UpdateConfigParamsError"
            ],
            "onSuccess": [
                "SendProcessCard"
            ],
            "properties": {
                "args": "${steps.UpdateConfigParams}",
                "formulaId": "31331"
            },
            "type": "formula"
        },
        {
            "name": "SendProcessCard",
            "onFailure": [],
            "onSuccess": [],
            "properties": {},
            "type": "script"
        },
        {
            "name": "UpdateConfigParamsError",
            "onFailure": [],
            "onSuccess": [],
            "properties": {},
            "type": "script"
        },
        {
            "name": "startExecutionError",
            "onFailure": [],
            "onSuccess": [],
            "properties": {},
            "type": "script"
        },
        {
            "name": "isValidationSuccessFull",
            "onFailure": [
                "UpdateErrorParams"
            ],
            "onSuccess": [
                "SendLastResult"
            ],
            "properties": {},
            "type": "filter"
        },
        {
            "name": "SendLastResult",
            "onFailure": [],
            "onSuccess": [],
            "properties": {},
            "type": "script"
        },
        {
            "name": "UpdateErrorParams",
            "onFailure": [],
            "onSuccess": [
                "updateConfigFailed"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "updateConfigFailed",
            "onFailure": [],
            "onSuccess": [
                "getUpdateConfigErrorAPIResponse"
            ],
            "properties": {
                "args": "${steps.UpdateErrorParams}",
                "formulaId": "31331"
            },
            "type": "formula"
        },
        {
            "name": "getUpdateConfigErrorAPIResponse",
            "onFailure": [
                "updateConfigFailedError"
            ],
            "onSuccess": [
                "SendErrorCard"
            ],
            "properties": {},
            "type": "filter"
        },
        {
            "name": "SendErrorCard",
            "onFailure": [],
            "onSuccess": [],
            "properties": {},
            "type": "script"
        },
        {
            "name": "updateConfigFailedError",
            "onFailure": [],
            "onSuccess": [],
            "properties": {},
            "type": "script"
        },
        {
            "name": "ExecutionStatusParam",
            "onFailure": [],
            "onSuccess": [
                "GetExecutionStatus"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "GetExecutionStatus",
            "onFailure": [
                "CheckForPendingStatus"
            ],
            "onSuccess": [
                "CheckStatus"
            ],
            "properties": {
                "args": "${steps.ExecutionStatusParam}",
                "formulaId": "31330"
            },
            "type": "formula"
        },
        {
            "name": "CheckStatus",
            "onFailure": [],
            "onSuccess": [
                "HasError"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "HasError",
            "onFailure": [
                "UpdateErrorParams"
            ],
            "onSuccess": [
                "HasDone"
            ],
            "properties": {},
            "type": "filter"
        },
        {
            "name": "HasDone",
            "onFailure": [
                "SendProcessCard"
            ],
            "onSuccess": [
                "getResultAPI"
            ],
            "properties": {},
            "type": "filter"
        },
        {
            "name": "getResultAPI",
            "onFailure": [],
            "onSuccess": [
                "HasValidResult"
            ],
            "properties": {
                "api": "/formulas/instances/executions/steps/${steps.CheckStatus.result.id}/values",
                "method": "GET"
            },
            "type": "request"
        },
        {
            "name": "HasValidResult",
            "onFailure": [
                "SendProcessCard"
            ],
            "onSuccess": [
                "getUpdatedConfigs"
            ],
            "properties": {},
            "type": "filter"
        },
        {
            "name": "getUpdatedConfigs",
            "onFailure": [],
            "onSuccess": [
                "getUpdatedConfigsAPIResponse"
            ],
            "properties": {
                "args": "${steps.InputParams}",
                "formulaId": "31330"
            },
            "type": "formula"
        },
        {
            "name": "getUpdatedConfigsAPIResponse",
            "onFailure": [
                "getUpdatedConfigsError"
            ],
            "onSuccess": [
                "UpdateStatus"
            ],
            "properties": {},
            "type": "filter"
        },
        {
            "name": "UpdateStatus",
            "onFailure": [],
            "onSuccess": [
                "updateThirdPartyConfig"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "updateThirdPartyConfig",
            "onFailure": [],
            "onSuccess": [
                "updateTPConfigAPIResponse"
            ],
            "properties": {
                "args": "${steps.UpdateStatus}",
                "formulaId": "31331"
            },
            "type": "formula"
        },
        {
            "name": "updateTPConfigAPIResponse",
            "onFailure": [
                "updateThirdPartyConfigError"
            ],
            "onSuccess": [
                "MakeCard"
            ],
            "properties": {},
            "type": "filter"
        },
        {
            "name": "MakeCard",
            "onFailure": [],
            "onSuccess": [],
            "properties": {},
            "type": "script"
        },
        {
            "name": "updateThirdPartyConfigError",
            "onFailure": [],
            "onSuccess": [],
            "properties": {},
            "type": "script"
        },
        {
            "name": "getUpdatedConfigsError",
            "onFailure": [],
            "onSuccess": [],
            "properties": {},
            "type": "script"
        },
        {
            "name": "CheckForPendingStatus",
            "onFailure": [
                "getExecutionStatusError"
            ],
            "onSuccess": [
                "CheckStatus"
            ],
            "properties": {},
            "type": "filter"
        },
        {
            "name": "getExecutionStatusError",
            "onFailure": [],
            "onSuccess": [],
            "properties": {},
            "type": "script"
        },
        {
            "name": "FormulaParams",
            "onFailure": [],
            "onSuccess": [
                "CreateFormulaInstance"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "CreateFormulaInstance",
            "onFailure": [
                "createformulaInstanceError"
            ],
            "onSuccess": [
                "setupUpdateThirdpartyParam"
            ],
            "properties": {
                "api": "${steps.FormulaParams.url}",
                "body": "${steps.FormulaParams.body}",
                "method": "POST"
            },
            "type": "request"
        },
        {
            "name": "setupUpdateThirdpartyParam",
            "onFailure": [],
            "onSuccess": [
                "updateThirdPartyParam"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "updateThirdPartyParam",
            "onFailure": [],
            "onSuccess": [
                "updateThirdPartyParamAPIResponse"
            ],
            "properties": {
                "args": "${steps.setupUpdateThirdpartyParam}",
                "formulaId": "31331"
            },
            "type": "formula"
        },
        {
            "name": "updateThirdPartyParamAPIResponse",
            "onFailure": [
                "updateThirdPartyParamError"
            ],
            "onSuccess": [
                "ConfigParams"
            ],
            "properties": {},
            "type": "filter"
        },
        {
            "name": "updateThirdPartyParamError",
            "onFailure": [],
            "onSuccess": [],
            "properties": {},
            "type": "script"
        },
        {
            "name": "createformulaInstanceError",
            "onFailure": [],
            "onSuccess": [],
            "properties": {},
            "type": "script"
        },
        {
            "name": "getChargebeeConfigurationError",
            "onFailure": [],
            "onSuccess": [],
            "properties": {},
            "type": "script"
        }
    ],
    "subFormulas": [
        {
            "active": true,
            "configuration": [],
            "debugLoggingEnabled": false,
            "engine": "v3",
            "id": 31331,
            "name": "ChargebeePost",
            "singleThreaded": false,
            "steps": [
                {
                    "name": "ChargebeePostCallAgainHttp",
                    "onFailure": [
                        "ChargebeePostResult2"
                    ],
                    "onSuccess": [
                        "ChargebeePostCBDelay"
                    ],
                    "properties": {
                        "body": "if(steps.ChargebeePostInputParams.intervel.length > 0 && steps.ChargebeePostInputParams.retryCode[steps.ChargebeePostPostHttpData.response.code] !== undefined) {\n  steps.ChargebeePostInputParams.delay.query.delay = steps.ChargebeePostInputParams.intervel.pop();\n  done(true);\n}else {\n  done(false);\n}\n"
                    },
                    "type": "filter"
                },
                {
                    "name": "ChargebeePostCBDelay",
                    "onFailure": [],
                    "onSuccess": [
                        "ChargebeePostPostHttpData"
                    ],
                    "properties": {
                        "headers": "${steps.ChargebeePostInputParams.delay.headers}",
                        "method": "GET",
                        "query": "${steps.ChargebeePostInputParams.delay.query}",
                        "url": "${steps.ChargebeePostInputParams.delay.url}"
                    },
                    "type": "httpRequest"
                },
                {
                    "name": "ChargebeePostError",
                    "onFailure": [],
                    "onSuccess": [],
                    "properties": {
                        "body": "done({\n  cb_status:\"failure\",\n  cb_error_code:\"formula_invalid_url\"\n});"
                    },
                    "type": "script"
                },
                {
                    "name": "ChargebeePostInputParams",
                    "onFailure": [],
                    "onSuccess": [
                        "ChargebeePostIsValidUrl"
                    ],
                    "properties": {
                        "body": "let url = trigger.args.url;\nlet query = trigger.args.query;\nlet body = trigger.args.body;\nlet apiKey = trigger.args.apiKey;\nlet headers = trigger.args.headers;\nlet siteDomain = trigger.args.siteDomain;\nlet siteName = trigger.args.siteName;\nlet type = trigger.args.type;\n\n\nlet intervel = [];\nintervel.push(5000);\nintervel.push(4000);\nintervel.push(3000);\nintervel.push(2000);\nintervel.push(1000);\n\nif (query === undefined) {\n    query = {};\n}\nif (headers === undefined) {\n    headers = {};\n}\nif(body === undefined) {\n  body = {};\n}\ndone({\n    url: url,\n    query: query,\n    body:body,\n    //intervel:[5000,10000,20000,40000,80000],\n    intervel: intervel,\n    retryCode: {\n        503: true,\n        429: true,\n        502: true,\n        403: true,\n        400: true,\n    },\n    hardStop: {\n        503: true,\n        429: true,\n        502: true,\n        403: true,\n        400: true,\n        500:true,\n        401:true\n    },\n    headers: headers,\n    delay: {\n        url: \"https://\" + siteName + \".integrations.\" + siteDomain + \"/api/ipaasdelay\",\n        query: {\n            delay: 2000\n        },\n        headers: {\n            \"api_key\": apiKey\n        }\n    }\n});"
                    },
                    "type": "script"
                },
                {
                    "name": "ChargebeePostIsValidUrl",
                    "onFailure": [
                        "ChargebeePostError"
                    ],
                    "onSuccess": [
                        "ChargebeePostPostHttpData"
                    ],
                    "properties": {
                        "body": "done(steps.ChargebeePostInputParams.url !== undefined && steps.ChargebeePostInputParams.url!== \"\");"
                    },
                    "type": "filter"
                },
                {
                    "name": "ChargebeePostPostHttpData",
                    "onFailure": [
                        "ChargebeePostCallAgainHttp"
                    ],
                    "onSuccess": [
                        "ChargebeePostCallAgainHttp"
                    ],
                    "properties": {
                        "acceptableStatusCodes": "200-600",
                        "body": "${steps.ChargebeePostInputParams.body}",
                        "headers": "${steps.ChargebeePostInputParams.headers}",
                        "method": "POST",
                        "query": "${steps.ChargebeePostInputParams.query}",
                        "url": "${steps.ChargebeePostInputParams.url}"
                    },
                    "type": "httpRequest"
                },
                {
                    "name": "ChargebeePostResult2",
                    "onFailure": [],
                    "onSuccess": [],
                    "properties": {
                        "body": "if(steps.ChargebeePostPostHttpData.response.code <300) {\n  done({\n    cb_status:\"success\",\n    data:steps.ChargebeePostPostHttpData.response.body\n  });\n}else {\n  let cb_error_code = \"formula_default_error\";\n\n  let hardstop = steps.ChargebeePostInputParams.hardStop[steps.ChargebeePostPostHttpData.response.code] !== undefined;\n  if(steps.ChargebeePostPostHttpData.response.body!== undefined && steps.ChargebeePostPostHttpData.response.body.error_code !== undefined) {\n    cb_error_code = steps.ChargebeePostPostHttpData.response.body.error_code;\n  }\n  done({\n    cb_status:\"failure\",\n    cb_error_code:cb_error_code,\n    cb_exit:hardstop,\n    rbody:steps.ChargebeePostPostHttpData.response.body\n  });\n}\n\n"
                    },
                    "type": "script"
                }
            ],
            "triggers": [
                {
                    "async": true,
                    "name": "trigger",
                    "onFailure": [],
                    "onSuccess": [
                        "ChargebeePostInputParams"
                    ],
                    "properties": {},
                    "type": "manual"
                }
            ]
        },
        {
            "active": true,
            "configuration": [],
            "debugLoggingEnabled": false,
            "engine": "v3",
            "id": 31330,
            "name": "ChargebeeGet",
            "singleThreaded": false,
            "steps": [
                {
                    "name": "ChargebeeGetCallAgainCB",
                    "onFailure": [
                        "ChargebeeGetResult"
                    ],
                    "onSuccess": [
                        "ChargebeeGetCBDelay2"
                    ],
                    "properties": {
                        "body": "let code = \"\";\nif(steps.ChargebeeGetGetCBData !== undefined && steps.ChargebeeGetGetCBData.response !== undefined) {\n  code = steps.ChargebeeGetGetCBData.response.code;\n}\nif(steps.ChargebeeGetInputParams.intervel.length > 0 && steps.ChargebeeGetInputParams.retryCode[code] !== undefined) {\n  steps.ChargebeeGetInputParams.delay.query.delay = steps.ChargebeeGetInputParams.intervel.pop();\n  done(true);\n}else {\n  done(false);\n}\n"
                    },
                    "type": "filter"
                },
                {
                    "name": "ChargebeeGetCallAgainHttp",
                    "onFailure": [
                        "ChargebeeGetResult2"
                    ],
                    "onSuccess": [
                        "ChargebeeGetCBDelay"
                    ],
                    "properties": {
                        "body": "if(steps.ChargebeeGetInputParams.intervel.length > 0 && steps.ChargebeeGetInputParams.retryCode[steps.ChargebeeGetGetHttpData.response.code] !== undefined) {\n  steps.ChargebeeGetInputParams.delay.query.delay = steps.ChargebeeGetInputParams.intervel.pop();\n  done(true);\n}else {\n  done(false);\n}\n"
                    },
                    "type": "filter"
                },
                {
                    "name": "ChargebeeGetCBDelay",
                    "onFailure": [],
                    "onSuccess": [
                        "ChargebeeGetGetHttpData"
                    ],
                    "properties": {
                        "headers": "${steps.ChargebeeGetInputParams.delay.headers}",
                        "method": "GET",
                        "query": "${steps.ChargebeeGetInputParams.delay.query}",
                        "retry": "true",
                        "retryAttempts": "5",
                        "retryDelay": "500",
                        "retryStatusCodes": "500-599,429",
                        "url": "${steps.ChargebeeGetInputParams.delay.url}"
                    },
                    "type": "httpRequest"
                },
                {
                    "name": "ChargebeeGetCBDelay2",
                    "onFailure": [],
                    "onSuccess": [
                        "ChargebeeGetGetCBData"
                    ],
                    "properties": {
                        "headers": "${steps.ChargebeeGetInputParams.delay.headers}",
                        "method": "GET",
                        "query": "${steps.ChargebeeGetInputParams.delay.query}",
                        "retry": "true",
                        "retryAttempts": "5",
                        "retryDelay": "500",
                        "retryStatusCodes": "500-599,429",
                        "url": "${steps.ChargebeeGetInputParams.delay.url}"
                    },
                    "type": "httpRequest"
                },
                {
                    "name": "ChargebeeGetError",
                    "onFailure": [],
                    "onSuccess": [],
                    "properties": {
                        "body": "done({\n  cb_status:\"failure\",\n  cb_error_code:\"formula_invalid_url\"\n});"
                    },
                    "type": "script"
                },
                {
                    "name": "ChargebeeGetGetCBData",
                    "onFailure": [
                        "ChargebeeGetCallAgainCB"
                    ],
                    "onSuccess": [
                        "ChargebeeGetCallAgainCB"
                    ],
                    "properties": {
                        "acceptableStatusCodes": "200-600",
                        "api": "${steps.ChargebeeGetInputParams.url}",
                        "body": "${steps.ChargebeeGetInputParams.bodydata}",
                        "elementInstanceId": "${config.chargebee}",
                        "headers": "",
                        "method": "GET",
                        "query": "${steps.ChargebeeGetInputParams.query}",
                        "retry": "true",
                        "retryAttempts": "5",
                        "retryDelay": "500",
                        "retryStatusCodes": "500-599,429"
                    },
                    "type": "elementRequest"
                },
                {
                    "name": "ChargebeeGetGetHttpData",
                    "onFailure": [
                        "ChargebeeGetCallAgainHttp"
                    ],
                    "onSuccess": [
                        "ChargebeeGetCallAgainHttp"
                    ],
                    "properties": {
                        "acceptableStatusCodes": "200-600",
                        "body": "${steps.ChargebeeGetInputParams.bodydata}",
                        "headers": "${steps.ChargebeeGetInputParams.headers}",
                        "method": "GET",
                        "query": "${steps.ChargebeeGetInputParams.query}",
                        "url": "${steps.ChargebeeGetInputParams.url}"
                    },
                    "type": "httpRequest"
                },
                {
                    "name": "ChargebeeGetInputParams",
                    "onFailure": [],
                    "onSuccess": [
                        "ChargebeeGetIsValidUrl"
                    ],
                    "properties": {
                        "body": "let url = trigger.args.url;\nlet query = trigger.args.query;\nlet apiKey = trigger.args.apiKey;\nlet headers = trigger.args.headers;\nlet siteDomain = trigger.args.siteDomain;\nlet siteName = trigger.args.siteName;\nlet type = trigger.args.type;\nlet bodydata = trigger.args.bodydata;\nif (bodydata === undefined)\n{\n  bodydata = {};\n}\n\n\nlet intervel = [];\nintervel.push(5000);\nintervel.push(4000);\nintervel.push(3000);\nintervel.push(2000);\nintervel.push(1000);\n\nif (query === undefined) {\n    query = {};\n}\nif (headers === undefined) {\n    headers = {};\n}\ndone({\n    url: url,\n    query: query,\n    bodydata: bodydata,\n    //intervel:[5000,10000,20000,40000,80000],\n    intervel: intervel,\n    retryCode: {\n        503: true,\n        429: true,\n        502: true,\n        403: true,\n        400: true,\n    },\n    hardStop: {\n        503: true,\n        429: true,\n        502: true,\n        403: true,\n        400: true,\n        500:true,\n        401:true\n    },\n    headers: headers,\n    delay: {\n        url: \"https://\" + siteName + \".integrations.\" + siteDomain + \"/api/ipaasdelay\",\n        query: {\n            delay: 2000\n        },\n        headers: {\n            \"api_key\": apiKey\n        }\n    }\n});"
                    },
                    "type": "script"
                },
                {
                    "name": "ChargebeeGetIsHttp",
                    "onFailure": [
                        "ChargebeeGetGetCBData"
                    ],
                    "onSuccess": [
                        "ChargebeeGetGetHttpData"
                    ],
                    "properties": {
                        "body": "done(steps.ChargebeeGetInputParams.url.startsWith(\"https://\"));"
                    },
                    "type": "filter"
                },
                {
                    "name": "ChargebeeGetIsValidUrl",
                    "onFailure": [
                        "ChargebeeGetError"
                    ],
                    "onSuccess": [
                        "ChargebeeGetIsHttp"
                    ],
                    "properties": {
                        "body": "done(steps.ChargebeeGetInputParams.url !== undefined && steps.ChargebeeGetInputParams.url!== \"\");"
                    },
                    "type": "filter"
                },
                {
                    "name": "ChargebeeGetResult",
                    "onFailure": [],
                    "onSuccess": [],
                    "properties": {
                        "body": "let code = 600;\nif(steps.ChargebeeGetGetCBData !== undefined && steps.ChargebeeGetGetCBData.response !== undefined) {\n  code = steps.ChargebeeGetGetCBData.response.code;\n}\nif(code < 300) {\n  done({\n    cb_status:\"success\",\n    data:steps.ChargebeeGetGetCBData.response.body\n  });\n}else {\n  let cb_error_code = \"formula_default_error\";\n\n  let hardstop = steps.ChargebeeGetInputParams.hardStop[code] !== undefined;\n  if(steps.ChargebeeGetGetCBData!== undefined && steps.ChargebeeGetGetCBData.response!== undefined && steps.ChargebeeGetGetCBData.response.body!== undefined && steps.ChargebeeGetGetCBData.response.body.error_code !== undefined) {\n    cb_error_code = steps.ChargebeeGetGetCBData.response.body.error_code;\n  }\n  done({\n    cb_status:\"failure\",\n    cb_error_code:cb_error_code,\n    cb_exit:hardstop,\n    msg:steps.ChargebeeGetGetCBData.response,\n    cb_status_code:code\n  });\n}\n\n"
                    },
                    "type": "script"
                },
                {
                    "name": "ChargebeeGetResult2",
                    "onFailure": [],
                    "onSuccess": [],
                    "properties": {
                        "body": "if(steps.ChargebeeGetGetHttpData.response.code <300) {\n  done({\n    cb_status:\"success\",\n    data:steps.ChargebeeGetGetHttpData.response.body\n  });\n}else {\n  let cb_error_code = \"formula_default_error\";\n\n  let hardstop = steps.ChargebeeGetInputParams.hardStop[steps.ChargebeeGetGetHttpData.response.code] !== undefined;\n  if(steps.ChargebeeGetGetHttpData.response.body!== undefined && steps.ChargebeeGetGetHttpData.response.body.error_code !== undefined) {\n    cb_error_code = steps.ChargebeeGetGetHttpData.response.body.error_code;\n  }\n  done({\n    cb_status:\"failure\",\n    cb_error_code:cb_error_code,\n    cb_exit:hardstop,\n    cb_status_code:steps.ChargebeeGetGetHttpData.response.code\n  });\n}\n\n"
                    },
                    "type": "script"
                }
            ],
            "triggers": [
                {
                    "async": true,
                    "name": "trigger",
                    "onFailure": [],
                    "onSuccess": [
                        "ChargebeeGetInputParams"
                    ],
                    "properties": {},
                    "type": "manual"
                }
            ]
        }
    ],
    "triggers": [
        {
            "async": true,
            "name": "trigger",
            "onFailure": [],
            "onSuccess": [
                "Props"
            ],
            "properties": {},
            "type": "manual"
        }
    ],
    "uri": "/hubspot/validate"
}