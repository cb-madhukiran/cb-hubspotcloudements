{
    "active": true,
    "api": "GET /hubspot/stagestoggle",
    "configuration": [],
    "debugLoggingEnabled": false,
    "debugLoggingExpires": "2020-04-27T15:32:34Z",
    "engine": "v3",
    "id": 34401,
    "method": "GET",
    "name": "DynamicToggle",
    "singleThreaded": false,
    "steps": [
        {
            "name": "InputParams",
            "onFailure": [],
            "onSuccess": [
                "EnvProps"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "EnvProps",
            "onFailure": [],
            "onSuccess": [
                "getLifeCycleStages"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "getLifeCycleStages",
            "onFailure": [],
            "onSuccess": [
                "Success"
            ],
            "properties": {
                "args": "${steps.InputParams.params}",
                "formulaId": "34758"
            },
            "type": "formula"
        },
        {
            "name": "Success",
            "onFailure": [],
            "onSuccess": [],
            "properties": {},
            "type": "script"
        }
    ],
    "subFormulas": [
        {
            "active": true,
            "configuration": [],
            "debugLoggingEnabled": false,
            "engine": "v3",
            "id": 34758,
            "name": "GetLifeCycleStages",
            "singleThreaded": false,
            "steps": [
                {
                    "name": "EnvProps",
                    "onFailure": [],
                    "onSuccess": [
                        "getLifeCycleStages"
                    ],
                    "properties": {
                        "body": "let cloudElementsUrl = \"https://staging.cloud-elements.com/elements/api-v2\";\nlet DynamicToggleFormulaInstanceId = 435337\ndone({\n  cloudElementsUrl: cloudElementsUrl,\n  id : DynamicToggleFormulaInstanceId\n});"
                    },
                    "type": "script"
                },
                {
                    "name": "getLifeCycleStages",
                    "onFailure": [],
                    "onSuccess": [],
                    "properties": {
                        "body": "const _ = require('lodash');\n\nlet getRequestArgs = (arg)=>{\n    let triggerArgument = trigger.args[arg];\n        if(triggerArgument !== undefined) \n            return triggerArgument;\n        else{\n            return \"select\";\n        }\n    }\n\nlet NoSubscription = getRequestArgs('NoSubscription');\nlet TrialSubscription = getRequestArgs('TrialSubscription');\nlet ActiveSubscription = getRequestArgs('ActiveSubscription');\nlet CanceledSubscription = getRequestArgs('CanceledSubscription');\n\nlet cloudElementsUrl = steps.EnvProps.cloudElementsUrl;\n\nlet instanceId = steps.EnvProps.id;\n\n//Please ensure the keys order\nlet allowedStageDropDownKeys = [\n  \"select\",\n  \"subscriber\",\n  \"lead\",\n  \"marketingqualifiedlead\",\n  \"salesqualifiedlead\",\n  \"opportunity\",\n  \"customer\",\n  \"evangelist\",\n  \"other\",\n];\nÂ let allowedStageDropDownValues = {\n  select: \"Select\",\n  subscriber: \"Subscriber\",\n  lead: \"Lead\",\n  marketingqualifiedlead: \"Marketing Qualified lead\",\n  salesqualifiedlead: \"Sales Qualified lead\",\n  opportunity: \"Opportunity\",\n  customer: \"Customer\",\n  evangelist: \"Evangelist\",\n  other: \"Other\"\n}\n\nlet getIndexKey = (subscriptionStatus)=> {\n    if(subscriptionStatus.toLowerCase() === 'select'){\n        return -1;\n    }\n    else{\n        return allowedStageDropDownKeys.indexOf(subscriptionStatus) ;\n    }\n}\n\n\nlet NoSubscriptionIndex = getIndexKey(NoSubscription);\nlet TrialSubscriptionIndex = getIndexKey(TrialSubscription);\nlet ActiveSubscriptionIndex = getIndexKey(ActiveSubscription);\nlet CancelledSubscriptionIndex = getIndexKey(CanceledSubscription);\n\nlet SubscriptionStatusOptions = ['NoSubscription', 'TrialSubscription', 'ActiveSubscription', 'CanceledSubscription' ];\n\nlet arr = [ NoSubscriptionIndex, TrialSubscriptionIndex, ActiveSubscriptionIndex, CancelledSubscriptionIndex];\n\n//Logic to reset if any incorrect order\n// Eg arr = [5, 4 , 4 , 3] => arr = [5, -1, -1, -1]\nfor(var i = arr.length-1 ; i > 0; i--){\n    for(var j = i-1 ; j>=0; j-- ){\n        if(arr[j] >= arr[i]){\n            arr[i] = -1;\n        }\n    }\n}\n\n\nif(arr[SubscriptionStatusOptions.indexOf('TrialSubscription')] == -1){\n    TrialSubscription = 'select';\n}\n  \nif(arr[SubscriptionStatusOptions.indexOf('ActiveSubscription')] == -1){\n    ActiveSubscription = 'select' ;\n}\n  \nif(arr[SubscriptionStatusOptions.indexOf('CanceledSubscription')] == -1){ \n    CanceledSubscription = 'select';\n}\n\n//There are two steps to compute this index\n// first we find the first available index from the array\n// and compute the allowed values for corresponding drop down\n\nvar getIndex =  (subscriptionStatus)=>{\n    for(var i = SubscriptionStatusOptions.indexOf(subscriptionStatus)-1; i>=0;i--){\n      if(arr[i] == -1){\n          continue;\n      } else{\n          return arr[i] +1;\n      }\n  }\n  return -1;\n}\n\nvar getDropDownValues = (index)=>{  \n  var allValues = _.partition(allowedStageDropDownKeys,(i)=>allowedStageDropDownKeys.indexOf(i)<index);\n  var allowedValues = allValues[1];\n\n  var result = {select : 'Select'}\n\n    allowedValues.forEach((element)=>{\n      result[element]=allowedStageDropDownValues[element];\n    })\n    return result;\n}\n\n\nvar NoSubscriptionStageDropDownMap = getDropDownValues(0) // can contain all values for No subscription\n\nvar TrialSubscriptionStageDropDownMap = getDropDownValues(getIndex('TrialSubscription'));  \n\nvar ActiveSubscriptionStageDropDownMap = getDropDownValues(getIndex('ActiveSubscription'));\n\nvar CancelledSubscriptionStageDropDownMap = getDropDownValues(getIndex('CanceledSubscription'));\n\nlet dynamicRequest =  {\n  type: \"ON_CHANGE_FETCH_INPUT\",\n  apiEndPoint: {\n    apiUrl: cloudElementsUrl+\"/hubspot/stagestoggle\",\n    type: \"GET\",\n    headers: {\n      \"Elements-Formula-Instance-Id\": instanceId,\n    }\n  },\n};\n\nlet stages = [\n  {\n    dispName:\n      \"Choose the Lifecycle Stage in HubSpot you'd like to create/update the contact in, when the Chargebee customer\",\n    req: \"false\",\n    type: \"TEXTLABEL\",\n    id: \"HubSpotContactMatch-id\",\n  },\n  {\n    dispName: '<p style=\"padding-left: 10px;\">  Has no subscription',\n    req: \"false\",\n    type: \"DROPDOWN\",\n    id: \"NoSubscription\",\n    isMuted: \"true\",\n    allowedValues: NoSubscriptionStageDropDownMap,\n    defaultVal: NoSubscription,\n    isDynamic : \"true\",\n    request : dynamicRequest\n  },\n  {\n    dispName: '<p style=\"padding-left: 10px;\"> Has an In-Trial subscription',\n    req: \"false\",\n    type: \"DROPDOWN\",\n    id: \"TrialSubscription\",\n    isMuted: \"true\",\n    allowedValues: TrialSubscriptionStageDropDownMap,\n    defaultVal: TrialSubscription,\n    isDynamic : \"true\",\n    request : dynamicRequest\n  },\n  {\n    dispName: '<p style=\"padding-left: 10px;\"> Has an Active subscription',\n    req: \"false\",\n    type: \"DROPDOWN\",\n    id: \"ActiveSubscription\",\n    isMuted: \"true\",\n    allowedValues: ActiveSubscriptionStageDropDownMap,\n    defaultVal: ActiveSubscription,\n    isDynamic : \"true\",\n    request : dynamicRequest\n  },\n  {\n    dispName: '<p style=\"padding-left: 10px;\"> Has a Cancelled subscription',\n    req: \"false\",\n    type: \"DROPDOWN\",\n    id: \"CanceledSubscription\",\n    isMuted: \"true\",\n    allowedValues: CancelledSubscriptionStageDropDownMap,\n    defaultVal: CanceledSubscription,\n    isDynamic : \"true\",\n    request : dynamicRequest\n  },\n];\ndone({stages:stages});"
                    },
                    "type": "script"
                }
            ],
            "triggers": [
                {
                    "async": true,
                    "name": "trigger",
                    "onFailure": [],
                    "onSuccess": [
                        "EnvProps"
                    ],
                    "properties": {},
                    "type": "manual"
                }
            ]
        }
    ],
    "triggers": [
        {
            "async": true,
            "name": "trigger",
            "onFailure": [],
            "onSuccess": [
                "InputParams"
            ],
            "properties": {},
            "type": "manual"
        }
    ],
    "uri": "/hubspot/stagestoggle"
}