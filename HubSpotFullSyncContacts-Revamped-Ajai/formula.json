{
    "active": true,
    "configuration": [],
    "debugLoggingEnabled": false,
    "engine": "v3",
    "id": 32670,
    "name": "HubSpotFullSyncContacts-Revamped-Ajai",
    "singleThreaded": false,
    "steps": [
        {
            "name": "ContactInputParams",
            "onFailure": [],
            "onSuccess": [
                "SyncLog"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "SyncLog",
            "onFailure": [],
            "onSuccess": [
                "GetTpIntegConf"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "GetTpIntegConf",
            "onFailure": [],
            "onSuccess": [
                "IsTpIntegConfFetched"
            ],
            "properties": {
                "args": "${steps.ContactInputParams.getTpIntegConf}",
                "formulaId": "31330"
            },
            "type": "formula"
        },
        {
            "name": "IsTpIntegConfFetched",
            "onFailure": [],
            "onSuccess": [
                "GetCustomField"
            ],
            "properties": {},
            "type": "filter"
        },
        {
            "name": "GetCustomField",
            "onFailure": [],
            "onSuccess": [
                "IsCustomFieldFetched"
            ],
            "properties": {
                "args": "${steps.ContactInputParams.getCustomField}",
                "formulaId": "31330"
            },
            "type": "formula"
        },
        {
            "name": "IsCustomFieldFetched",
            "onFailure": [],
            "onSuccess": [
                "UpdateCustomFieldInfo"
            ],
            "properties": {},
            "type": "filter"
        },
        {
            "name": "UpdateCustomFieldInfo",
            "onFailure": [],
            "onSuccess": [
                "GetCBOrder"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "GetCBOrder",
            "onFailure": [],
            "onSuccess": [
                "CustomersParam"
            ],
            "properties": {
                "headers": "${steps.ContactInputParams.order.auth}",
                "method": "GET",
                "query": "${steps.ContactInputParams.order.query}",
                "url": "${steps.ContactInputParams.order.url}"
            },
            "type": "httpRequest"
        },
        {
            "name": "CustomersParam",
            "onFailure": [],
            "onSuccess": [
                "SubscriptionBulkApiData"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "SubscriptionBulkApiData",
            "onFailure": [],
            "onSuccess": [
                "LoopOverCustomer"
            ],
            "properties": {
                "args": "${steps.ContactInputParams.input}",
                "formulaId": "31729"
            },
            "type": "formula"
        },
        {
            "name": "LoopOverCustomer",
            "onFailure": [
                "SyncDone"
            ],
            "onSuccess": [
                "HasEmail"
            ],
            "properties": {
                "list": "${steps.ContactInputParams.input.customers}"
            },
            "type": "loop"
        },
        {
            "name": "HasEmail",
            "onFailure": [
                "UpdateNoEmail"
            ],
            "onSuccess": [
                "CBData"
            ],
            "properties": {},
            "type": "filter"
        },
        {
            "name": "CBData",
            "onFailure": [],
            "onSuccess": [
                "CBSubscriptionParam"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "CBSubscriptionParam",
            "onFailure": [],
            "onSuccess": [
                "CusSubDetails"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "CusSubDetails",
            "onFailure": [],
            "onSuccess": [
                "GetCustomerCbem"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "GetCustomerCbem",
            "onFailure": [],
            "onSuccess": [
                "SyncOnlyActiveSubscrption"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "SyncOnlyActiveSubscrption",
            "onFailure": [
                "LoopOverCustomer"
            ],
            "onSuccess": [
                "DoSyncOrder"
            ],
            "properties": {},
            "type": "filter"
        },
        {
            "name": "DoSyncOrder",
            "onFailure": [
                "HasContactInCBEM"
            ],
            "onSuccess": [
                "OrderParam"
            ],
            "properties": {},
            "type": "filter"
        },
        {
            "name": "OrderParam",
            "onFailure": [],
            "onSuccess": [
                "GetOrderBeforeCBGet"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "GetOrderBeforeCBGet",
            "onFailure": [],
            "onSuccess": [
                "GetOrderAfterCBGet"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "GetOrderAfterCBGet",
            "onFailure": [],
            "onSuccess": [
                "UpdateOrder"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "UpdateOrder",
            "onFailure": [],
            "onSuccess": [
                "HasContactInCBEM"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "HasContactInCBEM",
            "onFailure": [
                "GetHubspotContactByEmail"
            ],
            "onSuccess": [
                "GetHubspotContactByIdParam"
            ],
            "properties": {},
            "type": "filter"
        },
        {
            "name": "GetHubspotContactByIdParam",
            "onFailure": [],
            "onSuccess": [
                "GetHubspotContactById"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "GetHubspotContactById",
            "onFailure": [],
            "onSuccess": [
                "IsContactFound"
            ],
            "properties": {
                "args": "${steps.GetHubspotContactByIdParam}",
                "formulaId": "31332"
            },
            "type": "formula"
        },
        {
            "name": "IsContactFound",
            "onFailure": [
                "GetHubspotContactByEmailParam"
            ],
            "onSuccess": [
                "HubSpotInput"
            ],
            "properties": {},
            "type": "filter"
        },
        {
            "name": "HubSpotInput",
            "onFailure": [],
            "onSuccess": [
                "HubData"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "HubData",
            "onFailure": [],
            "onSuccess": [
                "IsHubSpotCreate"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "IsHubSpotCreate",
            "onFailure": [
                "PrepareUpdateInput"
            ],
            "onSuccess": [
                "PrepareCreateInput"
            ],
            "properties": {},
            "type": "filter"
        },
        {
            "name": "PrepareCreateInput",
            "onFailure": [],
            "onSuccess": [
                "CreateHubspotContactParam"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "CreateHubspotContactParam",
            "onFailure": [],
            "onSuccess": [
                "CreateHubspotContact"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "CreateHubspotContact",
            "onFailure": [],
            "onSuccess": [
                "CreateHubSPotFilter"
            ],
            "properties": {
                "args": "${steps.CreateHubspotContactParam}",
                "formulaId": "31333"
            },
            "type": "formula"
        },
        {
            "name": "CreateHubSPotFilter",
            "onFailure": [
                "SyncCreateError"
            ],
            "onSuccess": [
                "UpdateTPAfterCreate"
            ],
            "properties": {},
            "type": "filter"
        },
        {
            "name": "UpdateTPAfterCreate",
            "onFailure": [],
            "onSuccess": [
                "UpdateTPMappings"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "UpdateTPMappings",
            "onFailure": [],
            "onSuccess": [
                "LoopOverCustomer"
            ],
            "properties": {
                "args": "${steps.UpdateTPAfterCreate}",
                "formulaId": "31331"
            },
            "type": "formula"
        },
        {
            "name": "SyncCreateError",
            "onFailure": [],
            "onSuccess": [
                "UpdateTPMappingError3"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "UpdateTPMappingError3",
            "onFailure": [],
            "onSuccess": [
                "LoopOverCustomer"
            ],
            "properties": {
                "args": "${steps.SyncCreateError}",
                "formulaId": "31331"
            },
            "type": "formula"
        },
        {
            "name": "PrepareUpdateInput",
            "onFailure": [],
            "onSuccess": [
                "UpdateHubspotContactParam"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "UpdateHubspotContactParam",
            "onFailure": [],
            "onSuccess": [
                "UpdateHubspotContact"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "UpdateHubspotContact",
            "onFailure": [],
            "onSuccess": [
                "UpdateHubSpotFilter"
            ],
            "properties": {
                "args": "${steps.UpdateHubspotContactParam}",
                "formulaId": "31333"
            },
            "type": "formula"
        },
        {
            "name": "UpdateHubSpotFilter",
            "onFailure": [
                "SyncUpdateError"
            ],
            "onSuccess": [
                "UpdateTPAfterUpdate"
            ],
            "properties": {},
            "type": "filter"
        },
        {
            "name": "UpdateTPAfterUpdate",
            "onFailure": [],
            "onSuccess": [
                "UpdateTPMapping"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "UpdateTPMapping",
            "onFailure": [],
            "onSuccess": [
                "LoopOverCustomer"
            ],
            "properties": {
                "args": "${steps.UpdateTPAfterUpdate}",
                "formulaId": "31331"
            },
            "type": "formula"
        },
        {
            "name": "SyncUpdateError",
            "onFailure": [],
            "onSuccess": [
                "UpdateTPMappingError4"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "UpdateTPMappingError4",
            "onFailure": [],
            "onSuccess": [
                "LoopOverCustomer"
            ],
            "properties": {
                "args": "${steps.SyncUpdateError}",
                "formulaId": "31331"
            },
            "type": "formula"
        },
        {
            "name": "GetHubspotContactByEmailParam",
            "onFailure": [],
            "onSuccess": [
                "GetHubspotContactByEMail"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "GetHubspotContactByEMail",
            "onFailure": [],
            "onSuccess": [
                "DoCreateContact"
            ],
            "properties": {
                "args": "${steps.GetHubspotContactByEmailParam}",
                "formulaId": "31332"
            },
            "type": "formula"
        },
        {
            "name": "DoCreateContact",
            "onFailure": [
                "IsError"
            ],
            "onSuccess": [
                "HubSpotInput"
            ],
            "properties": {},
            "type": "filter"
        },
        {
            "name": "IsError",
            "onFailure": [
                "LoopOverCustomer"
            ],
            "onSuccess": [
                "UpdateDuplicateEmail"
            ],
            "properties": {},
            "type": "filter"
        },
        {
            "name": "UpdateDuplicateEmail",
            "onFailure": [],
            "onSuccess": [
                "UpdateTPMappingError2"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "UpdateTPMappingError2",
            "onFailure": [],
            "onSuccess": [
                "LoopOverCustomer"
            ],
            "properties": {
                "args": "${steps.UpdateDuplicateEmail}",
                "formulaId": "31331"
            },
            "type": "formula"
        },
        {
            "name": "GetHubspotContactByEmail",
            "onFailure": [
                "SearchHubspotContactParam"
            ],
            "onSuccess": [
                "GetHubspotContactByEmailParam"
            ],
            "properties": {},
            "type": "filter"
        },
        {
            "name": "SearchHubspotContactParam",
            "onFailure": [],
            "onSuccess": [
                "SearchHubspotContact"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "SearchHubspotContact",
            "onFailure": [],
            "onSuccess": [
                "IsContactExist"
            ],
            "properties": {
                "args": "${steps.SearchHubspotContactParam}",
                "formulaId": "31332"
            },
            "type": "formula"
        },
        {
            "name": "IsContactExist",
            "onFailure": [],
            "onSuccess": [
                "DoCreateContact"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "UpdateNoEmail",
            "onFailure": [],
            "onSuccess": [
                "UpdateTPMappingError"
            ],
            "properties": {},
            "type": "script"
        },
        {
            "name": "UpdateTPMappingError",
            "onFailure": [],
            "onSuccess": [
                "IsUpdateTPMappingDone"
            ],
            "properties": {
                "args": "${steps.UpdateNoEmail}",
                "formulaId": "31331"
            },
            "type": "formula"
        },
        {
            "name": "IsUpdateTPMappingDone",
            "onFailure": [],
            "onSuccess": [
                "LoopOverCustomer"
            ],
            "properties": {},
            "type": "filter"
        },
        {
            "name": "SyncDone",
            "onFailure": [],
            "onSuccess": [],
            "properties": {},
            "type": "script"
        }
    ],
    "subFormulas": [
        {
            "active": true,
            "configuration": [],
            "debugLoggingEnabled": false,
            "engine": "v3",
            "id": 31333,
            "name": "HubSpotPost",
            "singleThreaded": false,
            "steps": [
                {
                    "name": "HubSpotPostCallAgainHttp",
                    "onFailure": [
                        "HubSpotPostResult2"
                    ],
                    "onSuccess": [
                        "HubSpotPostCBDelay"
                    ],
                    "properties": {
                        "body": "\nif(steps.HubSpotPostInputParams.intervel.length > 0 && steps.HubSpotPostInputParams.retryCode[steps.HubSpotPostPostHttpData.response.code] !== undefined) {\n  steps.HubSpotPostInputParams.delay.query.delay = steps.HubSpotPostInputParams.intervel.pop();\n  done(true);\n}else {\n  done(false);\n}\n"
                    },
                    "type": "filter"
                },
                {
                    "name": "HubSpotPostCBDelay",
                    "onFailure": [],
                    "onSuccess": [
                        "HubSpotPostPostHttpData"
                    ],
                    "properties": {
                        "headers": "${steps.HubSpotPostInputParams.delay.headers}",
                        "method": "GET",
                        "query": "${steps.HubSpotPostInputParams.delay.query}",
                        "url": "${steps.HubSpotPostInputParams.delay.url}"
                    },
                    "type": "httpRequest"
                },
                {
                    "name": "HubSpotPostError",
                    "onFailure": [],
                    "onSuccess": [],
                    "properties": {
                        "body": "done({\n  cb_status:\"failure\",\n  cb_error_code:\"hubspot_invalid_url\"\n});"
                    },
                    "type": "script"
                },
                {
                    "name": "HubSpotPostInputParams",
                    "onFailure": [],
                    "onSuccess": [
                        "HubSpotPostIsValidUrl"
                    ],
                    "properties": {
                        "body": "let url = trigger.args.url;\nlet query = trigger.args.query;\nlet body = trigger.args.body;\nlet apiKey = trigger.args.apiKey;\nlet headers = trigger.args.headers;\nlet siteDomain = trigger.args.siteDomain;\nlet siteName = trigger.args.siteName;\nlet type = trigger.args.type;\n\n\nlet intervel = [];\nintervel.push(5000);\nintervel.push(4000);\nintervel.push(3000);\nintervel.push(2000);\nintervel.push(1000);\n\nif (query === undefined) {\n    query = {};\n}\nif (headers === undefined) {\n    headers = {};\n}\ndone({\n    url: url,\n    query: query,\n    body:body,\n    //intervel:[5000,10000,20000,40000,80000],\n    intervel: intervel,\n    retryCode: {\n        429: true,\n        502: true,\n        504: true,\n    },\n    hardStop: {\n        401: true,\n        403: true,\n        429: true,\n        502: true,\n        504: true,\n    },\n    headers: headers,\n    delay: {\n        url: \"https://\" + siteName + \".integrations.\" + siteDomain + \"/api/ipaasdelay\",\n        query: {\n            delay: 2000\n        },\n        headers: {\n            \"api_key\": apiKey\n        }\n    }\n});"
                    },
                    "type": "script"
                },
                {
                    "name": "HubSpotPostIsValidUrl",
                    "onFailure": [
                        "HubSpotPostError"
                    ],
                    "onSuccess": [
                        "HubSpotPostPostHttpData"
                    ],
                    "properties": {
                        "body": "let inputParams = steps.HubSpotPostInputParams;\ndone(inputParams.url !== undefined && inputParams.url!== \"\");"
                    },
                    "type": "filter"
                },
                {
                    "name": "HubSpotPostPostHttpData",
                    "onFailure": [],
                    "onSuccess": [
                        "HubSpotPostCallAgainHttp"
                    ],
                    "properties": {
                        "acceptableStatusCodes": "200-600",
                        "body": "${steps.HubSpotPostInputParams.body}",
                        "headers": "${steps.HubSpotPostInputParams.headers}",
                        "method": "POST",
                        "query": "",
                        "url": "${steps.HubSpotPostInputParams.url}"
                    },
                    "type": "httpRequest"
                },
                {
                    "name": "HubSpotPostResult2",
                    "onFailure": [],
                    "onSuccess": [],
                    "properties": {
                        "body": "if(steps.HubSpotPostPostHttpData.response.code <300) {\n  done({\n    cb_status:\"success\",\n    data:steps.HubSpotPostPostHttpData.response.body,\n    cb_code:steps.HubSpotPostPostHttpData.response.code,\n  });\n}else {\n  let cb_error_code = \"hubspot_default_error\";\n\n  let hardstop = steps.HubSpotPostInputParams.hardStop[steps.HubSpotPostPostHttpData.response.code] !== undefined;\n  if(steps.HubSpotPostPostHttpData.response.body!== undefined && steps.HubSpotPostPostHttpData.response.body.category !== undefined) {\n    cb_error_code = \"hubspot_\"+steps.HubSpotPostPostHttpData.response.body.category;\n  }\n  done({\n    cb_status:\"failure\",\n    cb_error_code:cb_error_code,\n    cb_exit:hardstop,\n    cb_code:steps.HubSpotPostPostHttpData.response.code,\n    response_body : steps.HubSpotPostPostHttpData.response\n  });\n}\n"
                    },
                    "type": "script"
                }
            ],
            "triggers": [
                {
                    "async": true,
                    "name": "trigger",
                    "onFailure": [],
                    "onSuccess": [
                        "HubSpotPostInputParams"
                    ],
                    "properties": {},
                    "type": "manual"
                }
            ]
        },
        {
            "active": true,
            "configuration": [],
            "debugLoggingEnabled": false,
            "engine": "v3",
            "id": 31330,
            "name": "ChargebeeGet",
            "singleThreaded": false,
            "steps": [
                {
                    "name": "ChargebeeGetCallAgainCB",
                    "onFailure": [
                        "ChargebeeGetResult"
                    ],
                    "onSuccess": [
                        "ChargebeeGetCBDelay2"
                    ],
                    "properties": {
                        "body": "let code = \"\";\nif(steps.ChargebeeGetGetCBData !== undefined && steps.ChargebeeGetGetCBData.response !== undefined) {\n  code = steps.ChargebeeGetGetCBData.response.code;\n}\nif(steps.ChargebeeGetInputParams.intervel.length > 0 && steps.ChargebeeGetInputParams.retryCode[code] !== undefined) {\n  steps.ChargebeeGetInputParams.delay.query.delay = steps.ChargebeeGetInputParams.intervel.pop();\n  done(true);\n}else {\n  done(false);\n}\n"
                    },
                    "type": "filter"
                },
                {
                    "name": "ChargebeeGetCallAgainHttp",
                    "onFailure": [
                        "ChargebeeGetResult2"
                    ],
                    "onSuccess": [
                        "ChargebeeGetCBDelay"
                    ],
                    "properties": {
                        "body": "if(steps.ChargebeeGetInputParams.intervel.length > 0 && steps.ChargebeeGetInputParams.retryCode[steps.ChargebeeGetGetHttpData.response.code] !== undefined) {\n  steps.ChargebeeGetInputParams.delay.query.delay = steps.ChargebeeGetInputParams.intervel.pop();\n  done(true);\n}else {\n  done(false);\n}\n"
                    },
                    "type": "filter"
                },
                {
                    "name": "ChargebeeGetCBDelay",
                    "onFailure": [],
                    "onSuccess": [
                        "ChargebeeGetGetHttpData"
                    ],
                    "properties": {
                        "headers": "${steps.ChargebeeGetInputParams.delay.headers}",
                        "method": "GET",
                        "query": "${steps.ChargebeeGetInputParams.delay.query}",
                        "retry": "true",
                        "retryAttempts": "5",
                        "retryDelay": "500",
                        "retryStatusCodes": "500-599,429",
                        "url": "${steps.ChargebeeGetInputParams.delay.url}"
                    },
                    "type": "httpRequest"
                },
                {
                    "name": "ChargebeeGetCBDelay2",
                    "onFailure": [],
                    "onSuccess": [
                        "ChargebeeGetGetCBData"
                    ],
                    "properties": {
                        "headers": "${steps.ChargebeeGetInputParams.delay.headers}",
                        "method": "GET",
                        "query": "${steps.ChargebeeGetInputParams.delay.query}",
                        "retry": "true",
                        "retryAttempts": "5",
                        "retryDelay": "500",
                        "retryStatusCodes": "500-599,429",
                        "url": "${steps.ChargebeeGetInputParams.delay.url}"
                    },
                    "type": "httpRequest"
                },
                {
                    "name": "ChargebeeGetError",
                    "onFailure": [],
                    "onSuccess": [],
                    "properties": {
                        "body": "done({\n  cb_status:\"failure\",\n  cb_error_code:\"formula_invalid_url\"\n});"
                    },
                    "type": "script"
                },
                {
                    "name": "ChargebeeGetGetCBData",
                    "onFailure": [
                        "ChargebeeGetCallAgainCB"
                    ],
                    "onSuccess": [
                        "ChargebeeGetCallAgainCB"
                    ],
                    "properties": {
                        "acceptableStatusCodes": "200-600",
                        "api": "${steps.ChargebeeGetInputParams.url}",
                        "body": "${steps.ChargebeeGetInputParams.bodydata}",
                        "elementInstanceId": "${config.chargebee}",
                        "headers": "",
                        "method": "GET",
                        "query": "${steps.ChargebeeGetInputParams.query}",
                        "retry": "true",
                        "retryAttempts": "5",
                        "retryDelay": "500",
                        "retryStatusCodes": "500-599,429"
                    },
                    "type": "elementRequest"
                },
                {
                    "name": "ChargebeeGetGetHttpData",
                    "onFailure": [
                        "ChargebeeGetCallAgainHttp"
                    ],
                    "onSuccess": [
                        "ChargebeeGetCallAgainHttp"
                    ],
                    "properties": {
                        "acceptableStatusCodes": "200-600",
                        "body": "${steps.ChargebeeGetInputParams.bodydata}",
                        "headers": "${steps.ChargebeeGetInputParams.headers}",
                        "method": "GET",
                        "query": "${steps.ChargebeeGetInputParams.query}",
                        "url": "${steps.ChargebeeGetInputParams.url}"
                    },
                    "type": "httpRequest"
                },
                {
                    "name": "ChargebeeGetInputParams",
                    "onFailure": [],
                    "onSuccess": [
                        "ChargebeeGetIsValidUrl"
                    ],
                    "properties": {
                        "body": "let url = trigger.args.url;\nlet query = trigger.args.query;\nlet apiKey = trigger.args.apiKey;\nlet headers = trigger.args.headers;\nlet siteDomain = trigger.args.siteDomain;\nlet siteName = trigger.args.siteName;\nlet type = trigger.args.type;\nlet bodydata = trigger.args.bodydata;\nif (bodydata === undefined)\n{\n  bodydata = {};\n}\n\n\nlet intervel = [];\nintervel.push(5000);\nintervel.push(4000);\nintervel.push(3000);\nintervel.push(2000);\nintervel.push(1000);\n\nif (query === undefined) {\n    query = {};\n}\nif (headers === undefined) {\n    headers = {};\n}\ndone({\n    url: url,\n    query: query,\n    bodydata: bodydata,\n    //intervel:[5000,10000,20000,40000,80000],\n    intervel: intervel,\n    retryCode: {\n        503: true,\n        429: true,\n        502: true,\n        403: true,\n        400: true,\n    },\n    hardStop: {\n        503: true,\n        429: true,\n        502: true,\n        403: true,\n        400: true,\n        500:true,\n        401:true\n    },\n    headers: headers,\n    delay: {\n        url: \"https://\" + siteName + \".integrations.\" + siteDomain + \"/api/ipaasdelay\",\n        query: {\n            delay: 2000\n        },\n        headers: {\n            \"api_key\": apiKey\n        }\n    }\n});"
                    },
                    "type": "script"
                },
                {
                    "name": "ChargebeeGetIsHttp",
                    "onFailure": [
                        "ChargebeeGetGetCBData"
                    ],
                    "onSuccess": [
                        "ChargebeeGetGetHttpData"
                    ],
                    "properties": {
                        "body": "done(steps.ChargebeeGetInputParams.url.startsWith(\"https://\"));"
                    },
                    "type": "filter"
                },
                {
                    "name": "ChargebeeGetIsValidUrl",
                    "onFailure": [
                        "ChargebeeGetError"
                    ],
                    "onSuccess": [
                        "ChargebeeGetIsHttp"
                    ],
                    "properties": {
                        "body": "done(steps.ChargebeeGetInputParams.url !== undefined && steps.ChargebeeGetInputParams.url!== \"\");"
                    },
                    "type": "filter"
                },
                {
                    "name": "ChargebeeGetResult",
                    "onFailure": [],
                    "onSuccess": [],
                    "properties": {
                        "body": "let code = 600;\nif(steps.ChargebeeGetGetCBData !== undefined && steps.ChargebeeGetGetCBData.response !== undefined) {\n  code = steps.ChargebeeGetGetCBData.response.code;\n}\nif(code < 300) {\n  done({\n    cb_status:\"success\",\n    data:steps.ChargebeeGetGetCBData.response.body\n  });\n}else {\n  let cb_error_code = \"formula_default_error\";\n\n  let hardstop = steps.ChargebeeGetInputParams.hardStop[code] !== undefined;\n  if(steps.ChargebeeGetGetCBData!== undefined && steps.ChargebeeGetGetCBData.response!== undefined && steps.ChargebeeGetGetCBData.response.body!== undefined && steps.ChargebeeGetGetCBData.response.body.error_code !== undefined) {\n    cb_error_code = steps.ChargebeeGetGetCBData.response.body.error_code;\n  }\n  done({\n    cb_status:\"failure\",\n    cb_error_code:cb_error_code,\n    cb_exit:hardstop,\n    msg:steps.ChargebeeGetGetCBData.response,\n    cb_status_code:code\n  });\n}\n\n"
                    },
                    "type": "script"
                },
                {
                    "name": "ChargebeeGetResult2",
                    "onFailure": [],
                    "onSuccess": [],
                    "properties": {
                        "body": "if(steps.ChargebeeGetGetHttpData.response.code <300) {\n  done({\n    cb_status:\"success\",\n    data:steps.ChargebeeGetGetHttpData.response.body\n  });\n}else {\n  let cb_error_code = \"formula_default_error\";\n\n  let hardstop = steps.ChargebeeGetInputParams.hardStop[steps.ChargebeeGetGetHttpData.response.code] !== undefined;\n  if(steps.ChargebeeGetGetHttpData.response.body!== undefined && steps.ChargebeeGetGetHttpData.response.body.error_code !== undefined) {\n    cb_error_code = steps.ChargebeeGetGetHttpData.response.body.error_code;\n  }\n  done({\n    cb_status:\"failure\",\n    cb_error_code:cb_error_code,\n    cb_exit:hardstop,\n    cb_status_code:steps.ChargebeeGetGetHttpData.response.code\n  });\n}\n\n"
                    },
                    "type": "script"
                }
            ],
            "triggers": [
                {
                    "async": true,
                    "name": "trigger",
                    "onFailure": [],
                    "onSuccess": [
                        "ChargebeeGetInputParams"
                    ],
                    "properties": {},
                    "type": "manual"
                }
            ]
        },
        {
            "active": true,
            "configuration": [],
            "debugLoggingEnabled": false,
            "engine": "v3",
            "id": 31332,
            "name": "HubSpotGet",
            "singleThreaded": false,
            "steps": [
                {
                    "name": "HubSpotGetCallAgainHttp",
                    "onFailure": [
                        "HubSpotGetResult2"
                    ],
                    "onSuccess": [
                        "HubSpotGetCBDelay"
                    ],
                    "properties": {
                        "body": "if(steps.HubSpotGetInputParams.intervel.length > 0 && steps.HubSpotGetInputParams.retryCode[steps.HubSpotGetGetHttpData.response.code] !== undefined) {\n  steps.HubSpotGetInputParams.delay.query.delay = steps.HubSpotGetInputParams.intervel.pop();\n  done(true);\n}else {\n  done(false);\n}\n"
                    },
                    "type": "filter"
                },
                {
                    "name": "HubSpotGetCBDelay",
                    "onFailure": [],
                    "onSuccess": [
                        "HubSpotGetGetHttpData"
                    ],
                    "properties": {
                        "headers": "${steps.HubSpotGetInputParams.delay.headers}",
                        "method": "GET",
                        "query": "${steps.HubSpotGetInputParams.delay.query}",
                        "url": "${steps.HubSpotGetInputParams.delay.url}"
                    },
                    "type": "httpRequest"
                },
                {
                    "name": "HubSpotGetError",
                    "onFailure": [],
                    "onSuccess": [],
                    "properties": {
                        "body": "done({\n  cb_status:\"failure\",\n  cb_error_code:\"hubspot_invalid_url\"\n});"
                    },
                    "type": "script"
                },
                {
                    "name": "HubSpotGetGetHttpData",
                    "onFailure": [],
                    "onSuccess": [
                        "HubSpotGetCallAgainHttp"
                    ],
                    "properties": {
                        "acceptableStatusCodes": "200-600",
                        "body": "",
                        "headers": "${steps.HubSpotGetInputParams.headers}",
                        "method": "GET",
                        "query": "${steps.HubSpotGetInputParams.query}",
                        "url": "${steps.HubSpotGetInputParams.url}"
                    },
                    "type": "httpRequest"
                },
                {
                    "name": "HubSpotGetInputParams",
                    "onFailure": [],
                    "onSuccess": [
                        "HubSpotGetIsValidUrl"
                    ],
                    "properties": {
                        "body": "let url = trigger.args.url;\nlet query = trigger.args.query;\nlet apiKey = trigger.args.apiKey;\nlet headers = trigger.args.headers;\nlet siteDomain = trigger.args.siteDomain;\nlet siteName = trigger.args.siteName;\nlet type = trigger.args.type;\n\n\nlet intervel = [];\nintervel.push(5000);\nintervel.push(4000);\nintervel.push(3000);\nintervel.push(2000);\nintervel.push(1000);\n\nif (query === undefined) {\n    query = {};\n}\nif (headers === undefined) {\n    headers = {};\n}\ndone({\n    url: url,\n    query: query,\n    //intervel:[5000,10000,20000,40000,80000],\n    intervel: intervel,\n    retryCode: {\n        429: true,\n        502: true,\n        504: true,\n    },\n    hardStop: {\n        401: true,\n        403: true,\n        429: true,\n        502: true,\n        504: true,\n    },\n    headers: headers,\n    delay: {\n        url: \"https://\" + siteName + \".integrations.\" + siteDomain + \"/api/ipaasdelay\",\n        query: {\n            delay: 2000\n        },\n        headers: {\n            \"api_key\": apiKey\n        }\n    }\n});"
                    },
                    "type": "script"
                },
                {
                    "name": "HubSpotGetIsValidUrl",
                    "onFailure": [
                        "HubSpotGetError"
                    ],
                    "onSuccess": [
                        "HubSpotGetGetHttpData"
                    ],
                    "properties": {
                        "body": "done(steps.HubSpotGetInputParams.url !== undefined && steps.HubSpotGetInputParams.url!== \"\");"
                    },
                    "type": "filter"
                },
                {
                    "name": "HubSpotGetResult2",
                    "onFailure": [],
                    "onSuccess": [],
                    "properties": {
                        "body": "let response  = steps.HubSpotGetGetHttpData.response;\nif(response.code <300) {\n  done({\n    cb_status:\"success\",\n    data:response.body,\n    cb_code:response.code,\n  });\n}else {\n  let cb_error_code = \"hubspot_default_error\";\n\n  let hardstop = steps.HubSpotGetInputParams.hardStop[response.code] !== undefined;\n  if(response.body!== undefined && response.body.category !== undefined) {\n    cb_error_code = \"hubspot_\" +response.body.category;\n  }\n  done({\n    cb_status:\"failure\",\n    cb_error_code:cb_error_code,\n    cb_exit:hardstop,\n    cb_code:response.code,\n  });\n}\n"
                    },
                    "type": "script"
                }
            ],
            "triggers": [
                {
                    "async": true,
                    "name": "trigger",
                    "onFailure": [],
                    "onSuccess": [
                        "HubSpotGetInputParams"
                    ],
                    "properties": {},
                    "type": "manual"
                }
            ]
        },
        {
            "active": true,
            "configuration": [],
            "debugLoggingEnabled": false,
            "engine": "v3",
            "id": 31729,
            "name": "HubspotCBBulkData",
            "singleThreaded": false,
            "steps": [
                {
                    "name": "bulkparam",
                    "onFailure": [],
                    "onSuccess": [
                        "bulkparamprocess"
                    ],
                    "properties": {
                        "body": "done(trigger.args);"
                    },
                    "type": "script"
                },
                {
                    "name": "bulkparamprocess",
                    "onFailure": [],
                    "onSuccess": [
                        "Executebulkbatch"
                    ],
                    "properties": {
                        "body": "let kk = steps.bulkparam.customers;\nlet bulkbodyparam=[];\nfor(var i=0;i<kk.length;i++)\n{\n  bulkbodyparam.push(kk[i].id);\n}\nlet apiKey = steps.bulkparam.apiKey;\nlet bulkinputjson={\n\"url\":\"https://\" + steps.bulkparam.siteName + \".integrations.\" + steps.bulkparam.siteDomain + \"/api/hubspot/subscriptiondetails\",\n\"apiKey\":apiKey,\n\"headers\":{\"api_key\":apiKey},\n\"siteDomain\":steps.bulkparam.siteDomain,\n\"siteName\":steps.bulkparam.siteName,\n\"type\":\"hubspot\",\n\"bodydata\":{\"customerids\":\nbulkbodyparam}};\ndone(bulkinputjson);\n"
                    },
                    "type": "script"
                },
                {
                    "name": "Executebulkbatch",
                    "onFailure": [],
                    "onSuccess": [],
                    "properties": {
                        "args": "${steps.bulkparamprocess}",
                        "formulaId": "31734"
                    },
                    "type": "formula"
                }
            ],
            "subFormulas": [
                {
                    "active": true,
                    "configuration": [],
                    "debugLoggingEnabled": false,
                    "engine": "v3",
                    "id": 31734,
                    "name": "ChargebeeGet1",
                    "singleThreaded": false,
                    "steps": [
                        {
                            "name": "ChargebeeGetCallAgainCB",
                            "onFailure": [],
                            "onSuccess": [],
                            "properties": {
                                "body": "let code = \"\";\nif(steps.ChargebeeGetGetCBData !== undefined && steps.ChargebeeGetGetCBData.response !== undefined) {\n  code = steps.ChargebeeGetGetCBData.response.code;\n}\nif(steps.ChargebeeGetInputParams.intervel.length > 0 && steps.ChargebeeGetInputParams.retryCode[code] !== undefined) {\n  steps.ChargebeeGetInputParams.delay.query.delay = steps.ChargebeeGetInputParams.intervel.pop();\n  done(true);\n}else {\n  done(false);\n}\n"
                            },
                            "type": "filter"
                        },
                        {
                            "name": "ChargebeeGetCallAgainHttp",
                            "onFailure": [
                                "ChargebeeGetResult2"
                            ],
                            "onSuccess": [
                                "ChargebeeGetCBDelay"
                            ],
                            "properties": {
                                "body": "if(steps.ChargebeeGetInputParams.intervel.length > 0 && steps.ChargebeeGetInputParams.retryCode[steps.ChargebeeGetGetHttpData.response.code] !== undefined) {\n  steps.ChargebeeGetInputParams.delay.query.delay = steps.ChargebeeGetInputParams.intervel.pop();\n  done(true);\n}else {\n  done(false);\n}\n"
                            },
                            "type": "filter"
                        },
                        {
                            "name": "ChargebeeGetCBDelay",
                            "onFailure": [],
                            "onSuccess": [
                                "ChargebeeGetGetHttpData"
                            ],
                            "properties": {
                                "headers": "${steps.ChargebeeGetInputParams.delay.headers}",
                                "method": "GET",
                                "query": "${steps.ChargebeeGetInputParams.delay.query}",
                                "url": "${steps.ChargebeeGetInputParams.delay.url}"
                            },
                            "type": "httpRequest"
                        },
                        {
                            "name": "ChargebeeGetCBDelay2",
                            "onFailure": [],
                            "onSuccess": [],
                            "properties": {
                                "headers": "${steps.ChargebeeGetInputParams.delay.headers}",
                                "method": "GET",
                                "query": "${steps.ChargebeeGetInputParams.delay.query}",
                                "url": "${steps.ChargebeeGetInputParams.delay.url}"
                            },
                            "type": "httpRequest"
                        },
                        {
                            "name": "ChargebeeGetError",
                            "onFailure": [],
                            "onSuccess": [],
                            "properties": {
                                "body": "done({\n  cb_status:\"failure\",\n  cb_error_code:\"formula_invalid_url\"\n});"
                            },
                            "type": "script"
                        },
                        {
                            "name": "ChargebeeGetGetCBData",
                            "onFailure": [],
                            "onSuccess": [],
                            "properties": {
                                "acceptableStatusCodes": "200-600",
                                "api": "${steps.ChargebeeGetInputParams.url}",
                                "body": "${steps.ChargebeeGetInputParams.bodydata}",
                                "elementInstanceId": "${config.chargebee}",
                                "headers": "",
                                "method": "GET",
                                "query": "${steps.ChargebeeGetInputParams.query}"
                            },
                            "type": "elementRequest"
                        },
                        {
                            "name": "ChargebeeGetGetHttpData",
                            "onFailure": [
                                "ChargebeeGetCallAgainHttp"
                            ],
                            "onSuccess": [
                                "ChargebeeGetCallAgainHttp"
                            ],
                            "properties": {
                                "acceptableStatusCodes": "200-600",
                                "body": "${steps.ChargebeeGetInputParams.bodydata}",
                                "headers": "${steps.ChargebeeGetInputParams.headers}",
                                "method": "GET",
                                "query": "${steps.ChargebeeGetInputParams.query}",
                                "url": "${steps.ChargebeeGetInputParams.url}"
                            },
                            "type": "httpRequest"
                        },
                        {
                            "name": "ChargebeeGetInputParams",
                            "onFailure": [],
                            "onSuccess": [
                                "ChargebeeGetIsValidUrl"
                            ],
                            "properties": {
                                "body": "let url = trigger.args.url;\nlet query = trigger.args.query;\nlet apiKey = trigger.args.apiKey;\nlet headers = trigger.args.headers;\nlet siteDomain = trigger.args.siteDomain;\nlet siteName = trigger.args.siteName;\nlet type = trigger.args.type;\nlet bodydata = trigger.args.bodydata;\nif (bodydata === undefined)\n{\n  bodydata = {};\n}\n\n\nlet intervel = [];\nintervel.push(5000);\nintervel.push(4000);\nintervel.push(3000);\nintervel.push(2000);\nintervel.push(1000);\n\nif (query === undefined) {\n    query = {};\n}\nif (headers === undefined) {\n    headers = {};\n}\ndone({\n    url: url,\n    query: query,\n    bodydata: bodydata,\n    //intervel:[5000,10000,20000,40000,80000],\n    intervel: intervel,\n    retryCode: {\n        503: true,\n        429: true,\n        502: true,\n        403: true,\n        400: true,\n    },\n    hardStop: {\n        503: true,\n        429: true,\n        502: true,\n        403: true,\n        400: true,\n        500:true,\n        401:true\n    },\n    headers: headers,\n    delay: {\n        url: \"https://\" + siteName + \".integrations.\" + siteDomain + \"/api/ipaasdelay\",\n        query: {\n            delay: 2000\n        },\n        headers: {\n            \"api_key\": apiKey\n        }\n    }\n});"
                            },
                            "type": "script"
                        },
                        {
                            "name": "ChargebeeGetIsHttp",
                            "onFailure": [],
                            "onSuccess": [
                                "ChargebeeGetGetHttpData"
                            ],
                            "properties": {
                                "body": "done(steps.ChargebeeGetInputParams.url.startsWith(\"https://\"));"
                            },
                            "type": "filter"
                        },
                        {
                            "name": "ChargebeeGetIsValidUrl",
                            "onFailure": [
                                "ChargebeeGetError"
                            ],
                            "onSuccess": [
                                "ChargebeeGetIsHttp"
                            ],
                            "properties": {
                                "body": "done(steps.ChargebeeGetInputParams.url !== undefined && steps.ChargebeeGetInputParams.url!== \"\");"
                            },
                            "type": "filter"
                        },
                        {
                            "name": "ChargebeeGetResult",
                            "onFailure": [],
                            "onSuccess": [],
                            "properties": {
                                "body": "let code = 600;\nif(steps.ChargebeeGetGetCBData !== undefined && steps.ChargebeeGetGetCBData.response !== undefined) {\n  code = steps.ChargebeeGetGetCBData.response.code;\n}\nif(code < 300) {\n  done({\n    cb_status:\"success\",\n    data:steps.ChargebeeGetGetCBData.response.body\n  });\n}else {\n  let cb_error_code = \"formula_default_error\";\n\n  let hardstop = steps.ChargebeeGetInputParams.hardStop[code] !== undefined;\n  if(steps.ChargebeeGetGetCBData!== undefined && steps.ChargebeeGetGetCBData.response!== undefined && steps.ChargebeeGetGetCBData.response.body!== undefined && steps.ChargebeeGetGetCBData.response.body.error_code !== undefined) {\n    cb_error_code = steps.ChargebeeGetGetCBData.response.body.error_code;\n  }\n  done({\n    cb_status:\"failure\",\n    cb_error_code:cb_error_code,\n    cb_exit:hardstop,\n    msg:steps.ChargebeeGetGetCBData.response\n  });\n}\n\n"
                            },
                            "type": "script"
                        },
                        {
                            "name": "ChargebeeGetResult2",
                            "onFailure": [],
                            "onSuccess": [],
                            "properties": {
                                "body": "if(steps.ChargebeeGetGetHttpData.response.code <300) {\n  done({\n    cb_status:\"success\",\n    data:steps.ChargebeeGetGetHttpData.response.body\n  });\n}else {\n  let cb_error_code = \"formula_default_error\";\n\n  let hardstop = steps.ChargebeeGetInputParams.hardStop[steps.ChargebeeGetGetHttpData.response.code] !== undefined;\n  if(steps.ChargebeeGetGetHttpData.response.body!== undefined && steps.ChargebeeGetGetHttpData.response.body.error_code !== undefined) {\n    cb_error_code = steps.ChargebeeGetGetHttpData.response.body.error_code;\n  }\n  done({\n    cb_status:\"failure\",\n    cb_error_code:cb_error_code,\n    cb_exit:hardstop\n  });\n}\n\n"
                            },
                            "type": "script"
                        }
                    ],
                    "triggers": [
                        {
                            "async": true,
                            "name": "trigger",
                            "onFailure": [],
                            "onSuccess": [
                                "ChargebeeGetInputParams"
                            ],
                            "properties": {},
                            "type": "manual"
                        }
                    ]
                }
            ],
            "triggers": [
                {
                    "async": true,
                    "name": "trigger",
                    "onFailure": [],
                    "onSuccess": [
                        "bulkparam"
                    ],
                    "properties": {},
                    "type": "manual"
                }
            ]
        },
        {
            "active": true,
            "configuration": [],
            "debugLoggingEnabled": false,
            "engine": "v3",
            "id": 31331,
            "name": "ChargebeePost",
            "singleThreaded": false,
            "steps": [
                {
                    "name": "ChargebeePostCallAgainHttp",
                    "onFailure": [
                        "ChargebeePostResult2"
                    ],
                    "onSuccess": [
                        "ChargebeePostCBDelay"
                    ],
                    "properties": {
                        "body": "if(steps.ChargebeePostInputParams.intervel.length > 0 && steps.ChargebeePostInputParams.retryCode[steps.ChargebeePostPostHttpData.response.code] !== undefined) {\n  steps.ChargebeePostInputParams.delay.query.delay = steps.ChargebeePostInputParams.intervel.pop();\n  done(true);\n}else {\n  done(false);\n}\n"
                    },
                    "type": "filter"
                },
                {
                    "name": "ChargebeePostCBDelay",
                    "onFailure": [],
                    "onSuccess": [
                        "ChargebeePostPostHttpData"
                    ],
                    "properties": {
                        "headers": "${steps.ChargebeePostInputParams.delay.headers}",
                        "method": "GET",
                        "query": "${steps.ChargebeePostInputParams.delay.query}",
                        "url": "${steps.ChargebeePostInputParams.delay.url}"
                    },
                    "type": "httpRequest"
                },
                {
                    "name": "ChargebeePostError",
                    "onFailure": [],
                    "onSuccess": [],
                    "properties": {
                        "body": "done({\n  cb_status:\"failure\",\n  cb_error_code:\"formula_invalid_url\"\n});"
                    },
                    "type": "script"
                },
                {
                    "name": "ChargebeePostInputParams",
                    "onFailure": [],
                    "onSuccess": [
                        "ChargebeePostIsValidUrl"
                    ],
                    "properties": {
                        "body": "let url = trigger.args.url;\nlet query = trigger.args.query;\nlet body = trigger.args.body;\nlet apiKey = trigger.args.apiKey;\nlet headers = trigger.args.headers;\nlet siteDomain = trigger.args.siteDomain;\nlet siteName = trigger.args.siteName;\nlet type = trigger.args.type;\n\n\nlet intervel = [];\nintervel.push(5000);\nintervel.push(4000);\nintervel.push(3000);\nintervel.push(2000);\nintervel.push(1000);\n\nif (query === undefined) {\n    query = {};\n}\nif (headers === undefined) {\n    headers = {};\n}\nif(body === undefined) {\n  body = {};\n}\ndone({\n    url: url,\n    query: query,\n    body:body,\n    //intervel:[5000,10000,20000,40000,80000],\n    intervel: intervel,\n    retryCode: {\n        503: true,\n        429: true,\n        502: true,\n        403: true,\n        400: true,\n    },\n    hardStop: {\n        503: true,\n        429: true,\n        502: true,\n        403: true,\n        400: true,\n        500:true,\n        401:true\n    },\n    headers: headers,\n    delay: {\n        url: \"https://\" + siteName + \".integrations.\" + siteDomain + \"/api/ipaasdelay\",\n        query: {\n            delay: 2000\n        },\n        headers: {\n            \"api_key\": apiKey\n        }\n    }\n});"
                    },
                    "type": "script"
                },
                {
                    "name": "ChargebeePostIsValidUrl",
                    "onFailure": [
                        "ChargebeePostError"
                    ],
                    "onSuccess": [
                        "ChargebeePostPostHttpData"
                    ],
                    "properties": {
                        "body": "done(steps.ChargebeePostInputParams.url !== undefined && steps.ChargebeePostInputParams.url!== \"\");"
                    },
                    "type": "filter"
                },
                {
                    "name": "ChargebeePostPostHttpData",
                    "onFailure": [
                        "ChargebeePostCallAgainHttp"
                    ],
                    "onSuccess": [
                        "ChargebeePostCallAgainHttp"
                    ],
                    "properties": {
                        "acceptableStatusCodes": "200-600",
                        "body": "${steps.ChargebeePostInputParams.body}",
                        "headers": "${steps.ChargebeePostInputParams.headers}",
                        "method": "POST",
                        "query": "${steps.ChargebeePostInputParams.query}",
                        "url": "${steps.ChargebeePostInputParams.url}"
                    },
                    "type": "httpRequest"
                },
                {
                    "name": "ChargebeePostResult2",
                    "onFailure": [],
                    "onSuccess": [],
                    "properties": {
                        "body": "if(steps.ChargebeePostPostHttpData.response.code <300) {\n  done({\n    cb_status:\"success\",\n    data:steps.ChargebeePostPostHttpData.response.body\n  });\n}else {\n  let cb_error_code = \"formula_default_error\";\n\n  let hardstop = steps.ChargebeePostInputParams.hardStop[steps.ChargebeePostPostHttpData.response.code] !== undefined;\n  if(steps.ChargebeePostPostHttpData.response.body!== undefined && steps.ChargebeePostPostHttpData.response.body.error_code !== undefined) {\n    cb_error_code = steps.ChargebeePostPostHttpData.response.body.error_code;\n  }\n  done({\n    cb_status:\"failure\",\n    cb_error_code:cb_error_code,\n    cb_exit:hardstop,\n    rbody:steps.ChargebeePostPostHttpData.response.body\n  });\n}\n\n"
                    },
                    "type": "script"
                }
            ],
            "triggers": [
                {
                    "async": true,
                    "name": "trigger",
                    "onFailure": [],
                    "onSuccess": [
                        "ChargebeePostInputParams"
                    ],
                    "properties": {},
                    "type": "manual"
                }
            ]
        }
    ],
    "triggers": [
        {
            "async": true,
            "name": "trigger",
            "onFailure": [],
            "onSuccess": [
                "ContactInputParams"
            ],
            "properties": {},
            "type": "manual"
        }
    ]
}